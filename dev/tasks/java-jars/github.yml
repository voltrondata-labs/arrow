# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

{% import 'macros.jinja' as macros with context %}

{{ macros.github_header() }}

jobs:

  build-cpp-ubuntu:
    name: Build C++ libraries Ubuntu
    runs-on: ubuntu-latest
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_install_archery()|indent }}
      - name: Build C++ libraries
        run: |
          archery docker run \
            -e ARROW_JAVA_BUILD=OFF \
            -e ARROW_JAVA_TEST=OFF \
            java-jni-manylinux-2014
      - name: Compress into single artifact to keep directory structure
        run: tar -cvzf arrow-shared-libs-linux.tar.gz arrow/java-dist/
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: ubuntu-shared-lib
          path: arrow-shared-libs-linux.tar.gz
    {% if arrow.is_default_branch() %}
      {{ macros.github_login_dockerhub()|indent }}
      - name: Push Docker image
        shell: bash
        run: archery docker push java-jni-manylinux-2014
    {% endif %}

  build-cpp-macos:
    name: Build C++ libraries macOS
    runs-on: macos-latest
    env:
      MACOSX_DEPLOYMENT_TARGET: "10.13"
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_install_archery()|indent }}
      - name: Install dependencies
        run: |
          brew install --overwrite git
          brew bundle --file=arrow/cpp/Brewfile
          # We want to link aws-sdk-cpp statically but Homebrew's
          # aws-sdk-cpp provides only shared library. If we have
          # Homebrew's aws-sdk-cpp, our build mix Homebrew's
          # aws-sdk-cpp and bundled aws-sdk-cpp. We uninstall Homebrew's
          # aws-sdk-cpp to ensure using only bundled aws-sdk-cpp.
          brew uninstall aws-sdk-cpp
      - name: Setup ccache
        run: |
          arrow/ci/scripts/ccache_setup.sh
      - name: Build C++ libraries
        run: |
          set -e
          arrow/ci/scripts/java_jni_macos_build.sh \
            $GITHUB_WORKSPACE/arrow \
            $GITHUB_WORKSPACE/arrow/cpp-build \
            $GITHUB_WORKSPACE/arrow/java-dist
      - name: Compress into single artifact to keep directory structure
        run: tar -cvzf arrow-shared-libs-macos.tar.gz arrow/java-dist/
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: macos-shared-lib
          path: arrow-shared-libs-macos.tar.gz

  build-cpp-windows:
    name: Build C++ libraries Windows
    runs-on: windows-2019
    steps:
      {{ macros.github_checkout_arrow()|indent }}
      {{ macros.github_install_archery()|indent }}
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Download Timezone Database
        shell: bash
        run: arrow/ci/scripts/download_tz_database.sh
      - name: Build C++ libraries
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          bash -c "arrow/ci/scripts/java_jni_windows_build.sh $(pwd)/arrow $(pwd)/arrow/cpp-build $(pwd)/arrow/java-dist"
      - name: Compress into single artifact to keep directory structure
        shell: bash
        run: tar -cvzf arrow-shared-libs-windows.tar.gz arrow/java-dist/
      - name: Upload artifacts
        uses: actions/upload-artifact@v2
        with:
          name: windows-shared-lib
          path: arrow-shared-libs-windows.tar.gz

  package-jars:
    name: Build jar files
    runs-on: macos-latest
    needs:
      - build-cpp-ubuntu
      - build-cpp-macos
      - build-cpp-windows
    steps:
      {{ macros.github_checkout_arrow(fetch_depth=0)|indent }}
      - name: Download Linux C++ Libraries
        uses: actions/download-artifact@v2
        with:
          name: ubuntu-shared-lib
      - name: Download macOS C++ libraries
        uses: actions/download-artifact@v2
        with:
          name: macos-shared-lib
      - name: Download Windows C++ libraries
        uses: actions/download-artifact@v2
        with:
          name: windows-shared-lib
      - name: Descompress artifacts
        run: |
          tar -xvzf arrow-shared-libs-linux.tar.gz
          tar -xvzf arrow-shared-libs-macos.tar.gz
          tar -xvzf arrow-shared-libs-windows.tar.gz
      - name: Test that shared libraries exist
        run: |
          set -x
          test -f arrow/java-dist/libarrow_cdata_jni.dylib
          test -f arrow/java-dist/libarrow_cdata_jni.so
          test -f arrow/java-dist/arrow_cdata_jni.dll
          test -f arrow/java-dist/libarrow_dataset_jni.dylib
          test -f arrow/java-dist/libarrow_dataset_jni.so
          test -f arrow/java-dist/arrow_dataset_jni.dll
          test -f arrow/java-dist/libarrow_orc_jni.dylib
          test -f arrow/java-dist/libarrow_orc_jni.so
          # We can enable this after ARROW-17817 is resolved.
          # test -f arrow/java-dist/arrow_orc_jni.dll
          test -f arrow/java-dist/libgandiva_jni.dylib
          test -f arrow/java-dist/libgandiva_jni.so
          test -f arrow/java-dist/libplasma_java.dylib
          test -f arrow/java-dist/libplasma_java.so
      - name: Build bundled jar
        run: |
          set -e
          pushd arrow/java
          mvn versions:set -DnewVersion={{ arrow.no_rc_snapshot_version }}
          popd
          arrow/ci/scripts/java_full_build.sh \
            $GITHUB_WORKSPACE/arrow \
            $GITHUB_WORKSPACE/arrow/java-dist
      {{ macros.github_upload_releases(["arrow/java-dist/*.jar",
                                        "arrow/java-dist/*.pom",
                                        "arrow/java-dist/*.zip"])|indent }}
